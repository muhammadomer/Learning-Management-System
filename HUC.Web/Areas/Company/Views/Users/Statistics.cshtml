@using HUC.Web.App.Courses
@using HUC.Web.Models
@model HUC.Web.App.Companies.Users.CompanyUserModel
@{
    ViewBag.PageData = new PageDataModel
    {
        Title = "Users Courses",
        ContentTitle = Model.User.FirstName + " " + Model.User.LastName + " - View profile",
        ContentTitleDesc = "",//"Here you can see the courses this user has access to and their progress.",
        ActivePage = "users",
        Breadcrumb = new List<BreadcrumbItem>
{
            new BreadcrumbItem("Users", Url.Action("Index"), "i-users3"),
            new BreadcrumbItem(Model.User.FirstName + " " + Model.User.LastName),
            new BreadcrumbItem("Statistics")
        }
    };
    var courselList = (List<int>)ViewBag.CourseList;
    var coursesInCompany = Model.User.Company.Courses.Select(x => x.Course);
    coursesInCompany = coursesInCompany.Where(x => courselList.Any(z => x.ID == z)).ToList();
    var coursesUniqueToUser = Model.User.DirectCourses;

    var _year = Model.Year;
}

@section Scripts{
    <script type="text/javascript">
        $(document).ready(function () {

            //if ($.fn.DataTable.isDataTable('#sortable')) {
            //    $('#sortable').DataTable().destroy();
            //}
            //$('#sortable').dataTable({
            //    "bProcessing": true,
            //    "bDestroy": true,
            //    "sDom": "<'row'<'col-sm-6'l><'col-sm-6'f>r>t<'row'<'col-sm-6'i><'col-sm-6'p>>",
            //    "sPaginationType": "full_numbers",
            //    "iDisplayLength": 100
            //});
            $('#sortable').dataTable({
                "bProcessing": true,
                "sDom": "<'row'<'col-sm-6'l><'col-sm-6'f>r>t<'row'<'col-sm-6'i><'col-sm-6'p>>",
                "sPaginationType": "full_numbers",
                "aoColumns": [null, null, { "bSortable": false }],
                "iDisplayLength": 10
            });
            $('.dataTables_length').hide();
            $('.dataTables_filter').hide();
            $('.dataTables_paginate').hide();
            $('.dataTables_info').hide();
            $('#sortable').css("width","100%");

        });
    </script>
    <link href="@(HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : string.Empty)/_Content/Scale/js/datatables/datatables.css" rel="stylesheet" />
}
<style>
    .next {
        top: 110px;
        overflow: hidden;
        position: relative;
    }

    .aligntd {
        vertical-align: middle;
        text-align: center;
    }

    .prev {
        top: 110px;
        overflow: hidden;
        position: relative;
    }
</style>
<div class="hbox hidden" style="margin-bottom: 20px;">
    <aside class="aside-lg bg-light lter b-r profile-area hidden">
        <section class="vbox">
            <section class="scrollable">
                <div class="wrapper edited-padding">
                    <section class="panel no-border bg-primary lt">
                        <div class="panel-body">
                            <div class="row m-t-xl">
                                <div class="col-xs-12 text-center">
                                    <div class="inline">
                                        <div class="h4 m-t m-b-xs font-bold text-lt">@Model.User.FirstName @Model.User.LastName</div>
                                    </div>
                                </div>
                            </div>
                            <div class="wrapper m-t-xl m-b profile-data">
                                <div class="row m-b">
                                    <div class="col-xs-6 text-right profile-full-width">
                                        <small>Compliance Percentage</small>
                                        <div class="text-lt font-bold">@(Math.Round(Model.User.TotalCompliancePercent()))%</div>
                                    </div>
                                    <div class="col-xs-6 profile-full-width">
                                        <small>Email Address</small>
                                        <div class="text-lt font-bold">
                                            <a href="mailto:@Model.User.Email">@Model.User.Email</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            </section>
        </section>
    </aside>
    <aside class="col-md-12">
        <section class="vbox">
            <section class="scrollable">
                <div class="wrapper edited-padding full">

                </div>
            </section>
        </section>
    </aside>
</div>
<div class="row">
    <div class="col-md-6" style="text-align:right;padding-right:14px;padding-bottom:5px">
        <select class="chosen-select year-select" id="years-filter" name="Year" style=" width:100px;">
            <option value="">All Time</option>
            @foreach (var year in Model.YearsOptions())
            {

                <option value="@year" @if (Model.Year == year) { <text> selected="selected" </text> }>@year</option>

            }
        </select>

    </div>

</div>

<div class="row">
    <div class="col-md-6">
        <section class="panel panel-default">
            <header class="panel-heading font-bold">Time Spent Per Course (Minutes)</header>
            <button onclick="Backward()" class="prev" id="prev" style="float:left;display:none;"><i class="fa fa-chevron-circle-left"></i></button>
            <button onclick="Farward()" class="next" id="next" style="float:right;"><i class="fa fa-chevron-circle-right"></i></button>
            <div class="panel-body">
                <div id="revision-bar" style="height: 240px; display: none;"></div>
                <span id="revision-bar-error" class="chart-error" style="display: none;">No Statistics Available</span>
                <span id="revision-bar-loading" class="chart-loading">Loading Statistics...</span>
                <div class="row" style="padding-left:0px;height:5px"><label id="yeartxt1">All Time</label></div>

            </div>
        </section>
    </div>

    <div class="col-md-6">
        <section class="panel panel-default">
            <header class="panel-heading font-bold">Score Per Course (%)</header>
            <button onclick="BackwardScore()" class="prev" id="prevscore" style="float:left;display:none;"><i class="fa fa-chevron-circle-left"></i></button>
            <button onclick="FarwardScore()" class="next" id="nextscore" style="float:right;"><i class="fa fa-chevron-circle-right"></i></button>
            <div class="panel-body">
                <div id="score-bar" style="height: 240px; display: none;"></div>
                <span id="score-bar-error" class="chart-error" style="display: none;">No Statistics Available</span>
                <span id="score-bar-loading" class="chart-loading">Loading Statistics...</span>
                <div class="row" style="padding-left:0px;height:5px"><label id="yeartxt2">All Time</label></div>

            </div>
        </section>
    </div>
</div>

<h4 class="h4 hidden">
    Courses Via Company
</h4>
<p class="hidden">
    These are the courses that the user has access to as they are in your company and may access your company's courses.
</p>
@RenderCourseTable(coursesInCompany)


<h4 class="h4 hidden">
    Courses Unique To User
</h4>
<p class="hidden">
    These are the courses that your company hasn't been assigned but this user has been directly assigned with.
</p>
@*@RenderCourseTable(coursesUniqueToUser)*@

@helper RenderCourseTable(IEnumerable<CourseModel> courses)
{
    <section class="row">
        <div class="col-sm-12">
            <h3 class="m-b-xs text-background">
                Courses
            </h3>
        </div>

    </section>
    <div class="col-md-12">
        <section class="panel panel-default">
            <div class="table-responsive">
                @*<span class="table-header">Courses</span>*@
                <table id="sortable" class="table table-striped m-b-none black-header">
                    <thead>
                        <tr>
                            <th style="vertical-align: middle;">
                                Course Name
                            </th>

                            <th @*class="hidden"*@ class="aligntd">
                                Course Status
                            </th>
                            <th width="250px" class="aligntd">
                                Time spent
                            </th>
                            <th width="200px" class="aligntd">
                                Compliance Rating
                            </th>
                            <th width="200px" class="text-center">View test results</th>
                        </tr>
                    </thead>
                    <tbody>

                        @{
                            if (Model.Year.HasValue)
                            {
                                foreach (var course in courses.Where(x => Convert.ToDateTime(x.CreatedDate).Year == Model.Year).OrderBy(x => x.Name, new StrCmpLogicalComparer()))
                                {
                                    var result = 0;
                                    var userCourse = Model.User.UserCourses.FirstOrDefault(x => x.CourseID == course.ID);
                                    var isStarted = userCourse != null && userCourse.StartedOn.HasValue && !userCourse.IsComplete;
                                    var isComplete = userCourse != null && userCourse.StartedOn.HasValue && userCourse.IsComplete;
                                    if (userCourse != null)
                                    {
                                        result = ((userCourse.TotalScore * 100) / userCourse.Course.MaxScore);
                                    }

                                    <tr>
                                        <td style="vertical-align: middle;">
                                            @if (!isStarted && !isComplete)
                                            {
                                                @*@:Not Started*@
                                                <i class="fa fa-circle" style="color:grey" data-toggle="tooltip" title="Not Started"></i>
                                            }
                                            else
                                            {
                                                if (isComplete)
                                                {
                                                    @*@:Complete*@
                                                    <i class="fa fa-circle" style="color:#1aae88" data-toggle="tooltip" title="Complete"></i>
                                                }
                                                else
                                                {
                                                    @*@:Started*@
                                                    <i class="fa fa-circle" style="color:red" data-toggle="tooltip" title="In Progress"></i>
                                                }
                                            }
                                            @course.Name
                                        </td>
                                        <td @*class="hidden"*@ class="aligntd">
                                            @if (!isStarted && !isComplete)
                                            {
                                                @:Not Started
                                            }
                                            else
                                            {
                                                if (isComplete)
                                                {
                                                    if (userCourse != null && result >= userCourse.Course.PassingPercentage)
                                                    {
                                                        <i class="fa fa-check-circle"><span style="font-family:Bahnschrift"> Passed</span></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fa fa-times-circle" style="color:red"><span style="font-family:Bahnschrift"> Failed</span> </i>
                                                    }
                                                }
                                                else
                                                {
                                                    @:In Progress
                                                }
                                            }
                                        </td>
                                        <td class="aligntd">
                                            @if (!isStarted && !isComplete)
                                            {
                                                @:0 Minutes 0 Second

                                            }
                                            else
                                            {

                                                @userCourse.TimeTakenString
                                            }
                                        </td>
                                        <td class="aligntd">
                                            @if (!isStarted && !isComplete)
                                            {
                                                @:Not Started
                                            }
                                            else if (userCourse.IsComplete)
                                            {
                                                if (userCourse.Course.RetakeDuration == 0)
                                                {
                                                    @: Not Applicable
                                                }
                                                else if (result >= userCourse.Course.PassingPercentage)
                                                {
                                                    <i class="fa fa-check-circle" style="color:green"></i> @: Compliant
                                                }
                                                else
                                                {
                                                    <i class="fa fa-times-circle" style="color:red"></i> @:Not Compliant
                                                }
                                            }
                                            else
                                            {
                                                <i class="fa fa-times-circle" style="color:gray"></i> @: Not Compliant
                                            }
                                        </td>
                                        <td class="text-center" class="aligntd">
                                            @*<a href="@(HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : string.Empty)/Company/Usage/Course/@course.ID" class="btn btn-xs btn-rounded btn-success"><i class="fa fa-plus-square"></i> Overall Course Statistics</a>
                                                <a href="@(HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : string.Empty)/Company/Users/Results/@Model.ID?courseID=@course.ID" class="btn btn-xs btn-rounded btn-warning"><i class="fa fa-plus-square"></i> Test Results</a>*@
                                            @if (isComplete)
                                            {
                                                <a href="@(HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : string.Empty)/Company/Users/Results/@Model.ID?courseID=@course.ID"><i class="fa fa-file-text"></i></a>
                                            }
                                            else
                                            {
                                                <i class="fa fa-file-text" style="color:#c5c5c5"></i>
                                            }
                                        </td>
                                    </tr>
                                }

                            }
                            else if (Model.Year == null)
                            {
                                foreach (var course in courses.OrderBy(x => x.Name, new StrCmpLogicalComparer()))
                                {
                                    var result = 0;
                                    var userCourse = Model.User.UserCourses.FirstOrDefault(x => x.CourseID == course.ID);
                                    var isStarted = userCourse != null && userCourse.StartedOn.HasValue && !userCourse.IsComplete;
                                    var isComplete = userCourse != null && userCourse.StartedOn.HasValue && userCourse.IsComplete;
                                    if (userCourse != null)
                                    {
                                        result = ((userCourse.TotalScore * 100) / userCourse.Course.MaxScore);
                                    }

                                    <tr>
                                        <td style="vertical-align: middle;">
                                            @if (!isStarted && !isComplete)
                                            {
                                                @*@:Not Started*@
                                                <i class="fa fa-circle" style="color:grey" data-toggle="tooltip" title="Not Started"></i>
                                            }
                                            else
                                            {
                                                if (isComplete)
                                                {
                                                    @*@:Complete*@
                                                    <i class="fa fa-circle" style="color:#1aae88" data-toggle="tooltip" title="Complete"></i>
                                                }
                                                else
                                                {
                                                    @*@:Started*@
                                                    <i class="fa fa-circle" style="color:red" data-toggle="tooltip" title="In Progress"></i>
                                                }
                                            }
                                            @course.Name
                                        </td>
                                        <td @*class="hidden"*@ class="aligntd">
                                            @if (!isStarted && !isComplete)
                                            {
                                                @:Not Started
                                            }
                                            else
                                            {
                                                if (isComplete)
                                                {
                                                    if (userCourse != null && result >= userCourse.Course.PassingPercentage)
                                                    {
                                                        <i class="fa fa-check-circle"><span style="font-family:Bahnschrift"> Passed</span></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fa fa-times-circle" style="color:red"><span style="font-family:Bahnschrift"> Failed</span> </i>
                                                    }
                                                }
                                                else
                                                {
                                                    @:In Progress
                                                }
                                            }
                                        </td>
                                        <td class="aligntd">
                                            @if (!isStarted && !isComplete)
                                            {
                                                @:0 Minutes 0 Second

                                            }
                                            else
                                            {

                                                @userCourse.TimeTakenString
                                            }
                                        </td>
                                        <td class="aligntd">
                                            @if (!isStarted && !isComplete)
                                            {
                                                @:Not Started
                                            }
                                            else if (userCourse.IsComplete)
                                            {
                                                if (userCourse.Course.RetakeDuration == 0)
                                                {
                                                    @: Not Applicable
                                                }
                                                else if (result >= userCourse.Course.PassingPercentage)
                                                {
                                                    <i class="fa fa-check-circle" style="color:green"></i> @: Compliant
                                                }
                                                else
                                                {
                                                    <i class="fa fa-times-circle" style="color:red"></i> @:Not Compliant
                                                }
                                            }
                                            else
                                            {
                                                <i class="fa fa-times-circle" style="color:gray"></i> @: Not Compliant
                                            }
                                        </td>
                                        <td class="text-center" class="aligntd">
                                            @*<a href="@(HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : string.Empty)/Company/Usage/Course/@course.ID" class="btn btn-xs btn-rounded btn-success"><i class="fa fa-plus-square"></i> Overall Course Statistics</a>
                                                <a href="@(HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : string.Empty)/Company/Users/Results/@Model.ID?courseID=@course.ID" class="btn btn-xs btn-rounded btn-warning"><i class="fa fa-plus-square"></i> Test Results</a>*@
                                            @if (isComplete)
                                            {
                                                <a href="@(HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : string.Empty)/Company/Users/Results/@Model.ID?courseID=@course.ID"><i class="fa fa-file-text"></i></a>
                                            }
                                            else
                                            {
                                                <i class="fa fa-file-text" style="color:#c5c5c5"></i>
                                            }
                                        </td>
                                    </tr>
                                }

                            }
                        }

                    </tbody>
                </table>
            </div>
        </section>
    </div>
}
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
<script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>
<script type="text/javascript">
$(document).ready(function () {
		$('.btn-2').removeAttr('style');
			$(".intro-text").removeClass("button-deactive");
			$(".btn-2").css("color", "#ffffff !important");

    });
    var counter = 0;
    var score = 0;
    var com = 0;
    function Farward() {
        counter++;
        com = 1;
        updateGraphs(counter,com);

    }
    function FarwardScore() {
        score++;
        com = 2;
        updateGraphs(score, com);

    }
    function Backward() {
        counter--;
        com = 1;
        if (counter <= 0) {

            $("#prev").hide();
            $("#next").show();
        }
        $("#next").show();
        updateGraphs(counter,com);
    }
    function BackwardScore() {
        score--;
        com = 2;
        if (score <= 0) {

            $("#prevscore").hide();
            $("#nextscore").show();
        }
        $("#nextscore").show();
        updateGraphs(score, com);
    }
        $(document).ready(function () {


            var year = $('#years-filter').val();

            updateGraphs(counter, com, year);
            //window.setInterval(function () {
            //    updateGraphs();
            //}, 5000);

            if (year == "") {
                $("#yeartxt1").text('All Time');
                $("#yeartxt2").text('All Time');
               
            }
            else {
                $("#yeartxt1").text(year);
                $("#yeartxt2").text(year);
            }



            //Year filter changes

            $("#years-filter").change(function () {

                debugger;

               var year=$('#years-filter').val();
               // window.location.reload();
               // window.location.href = '/company/users/statistics?year=' + $(this).val();
                  window.location.href = '/company/users/statistics?id=@Model.ID' + '&year=' + $(this).val();

               // updateGraphs(counter, com, year);


                //  $('#sortable').DataTable().ajax.reload(null,false);


            });
        });
    var defaultGraphOptions = {
        grid: {
            hoverable: true,
            clickable: false,
            borderWidth: 0
        },
        legend: {
            show: false
        },
        series: {
            shadowSize: 1
        }

    };
    //$("#score-bar").UseTooltip();
    function updateGraphs(count, co,year) {

        //var yer = $('#years-filter').val();


        $.get('@(HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : string.Empty)/Company/Users/StatisticsData?id=@Model.ID' + '&year='+year + '&next=' + count, function (data) {
            if (data.ScorePerCourse.existdata == false) {
                 if (co == 1) {
                     if (count > 0) {
                         $("#next").hide();
                         counter--;
                     } else {
                         $("#prev").hide();
                     }
                 } else if (co == 2) {
                     if (count > 0) {
                         $("#nextscore").hide();
                         counter--;
                     } else {
                         $("#prevscore").hide();
                     }
                 } else {
                     if (count > 0) {
                         $("#next").hide();
                         $("#nextscore").hide();
                     } else {
                         $("#prev").hide();
                         $("#prevscore").hide();
                     }

                }
                if (co == 0 && count == 0) {

                } else {
                    return false;
                }
            } if (data.ScorePerCourse.existdata == true) {

                 if (co == 1) {
                     if (count > 0)
                         $("#prev").show();
                 } else if (co == 2) {
                     if (count > 0)
                         $("#prevscore").show();
                 } else {
                     if (count > 0)
                         $("#prev").show();
                        // $("#prevscore").show();
                 }
             }
             if (co == 1) {
                 updateRevisionTimeGraph(data.TimePerCourse);
             } else if (co == 2) {
                 updateScoreGraph(data.ScorePerCourse);
             } else {
                 updateRevisionTimeGraph(data.TimePerCourse);
                 updateScoreGraph(data.ScorePerCourse);
             }

                });
    }
    function updateScoreGraph(data) {
        $("#score-bar-loading").hide();

        if (data == null || data.noData == true) {
            $("#score-bar").hide();
            $("#score-bar-error").show();
            $("#nextscore").hide();
            $("#next").hide();
        } else {
            $("#score-bar").show();
            $("#score-bar-error").hide();

            $("#score-bar").length && $.plot($("#score-bar"),
                [{
                    label: "User Average Score Per Course",
                    data: data.barData,
                    bars: {
                        show: true,
                        fill: true,
                        lineWidth: 1,
                        barWidth: 0.75,
                        order: 1,
                        align: 'center',
                        fillColor: { colors: [{ opacity: 0.5 }, { opacity: 0.9 }] }
                    },
                    color: "#e40424"
                }],
                $.extend({}, defaultGraphOptions, {
                    xaxis: {
                        ticks: data.ticks
                    },
                    yaxis: {
                        min: 0, max: 100, tickSize: 10, tickFormatter: function (v, axis) {
                            return v + "% ";
                        }
                    }
                })
            );
            $("#score-bar").UseTooltip("% ");
        }
    };
    function updateRevisionTimeGraph(data) {
        $("#revision-bar-loading").hide();

        if (data == null || data.noData == true) {
            $("#revision-bar").hide();
            $("#revision-bar-error").show();
            $("#nextscore").hide();
            $("#next").hide();
        } else {
            $("#revision-bar").show();
            $("#revision-bar-error").hide();

            $("#revision-bar").length && $.plot($("#revision-bar"),
                [{
                    label: "Average Time Spent Per Course",
                    data: data.barData,
                    bars: {
                        show: true,
                        fill: true,
                        lineWidth: 1,
                        barWidth: 0.75,
                        order: 1,
                        align: 'center',
                        fillColor: { colors: [{ opacity: 0.5 }, { opacity: 0.9 }] }
                    },
                    color: "#e40424"
                }],
                $.extend({}, defaultGraphOptions, {
                    xaxis: {
                        ticks: data.ticks
                    },
                    yaxis: {
                        min: 0, minTickSize: 1,
                        tickFormatter: function (v, axis) {
                            return v + " min.";
                        }
                    }
                })
            );
            $("#revision-bar").UseTooltip(" min.");
        }
    };
    var previousPoint = null, previousLabel = null;

    $.fn.UseTooltip = function (unit) {
        $(this).bind("plothover", function (event, pos, item) {
            if (item) {
                if ((previousLabel != item.series.label) || (previousPoint != item.dataIndex)) {
                    previousPoint = item.dataIndex;
                    previousLabel = item.series.label;
                    $("#tooltip").remove();

                    var x = item.datapoint[0];
                    var y = item.datapoint[1];

                    var color = item.series.color;
                    //console.log("x: " + x);
                  //  console.log(item);

                    showTooltip(item.pageX,
                        item.pageY,
                        color,
                        "<strong>" + item.series.label + "</strong><br>" + item.series.xaxis.ticks[x - 1].label + " : <strong>" + y + unit + "</strong>");
                }
            } else {
                $("#tooltip").remove();
                previousPoint = null;
            }
        });
    }

    function showTooltip(x, y, color, contents) {
        $('<div id="tooltip">' + contents + '</div>').css({
            position: 'absolute',
            display: 'none',
            top: y - 40,
            left: x - 120,
            border: '2px solid ' + color,
            padding: '3px',
            'font-size': '9px',
            'border-radius': '5px',
            'background-color': '#fff',
            'font-family': 'Verdana, Arial, Helvetica, Tahoma, sans-serif',
            opacity: 0.9
        }).appendTo("body").fadeIn(200);
    }
</script>
@*<script type="text/javascript">
        $(document).ready(function () {
            var defaultGraphOptions = {
                grid: {
                    hoverable: true,
                    clickable: false,
                    borderWidth: 0
                },
                legend: {
                    show: false
                },
                series: {
                    shadowSize: 1
                }
            };

            updateGraphs();
            //window.setInterval(function () {
            //    updateGraphs();
            //}, 5000);
            function updateGraphs() {
                $.get('@(HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : string.Empty)/Company/Users/StatisticsData/@Model.ID', function (data) {
                    updateRevisionTimeGraph(data.TimePerCourse);
                    updateScoreGraph(data.ScorePerCourse);
                });
            }


            function updateRevisionTimeGraph(data) {
                $("#revision-bar-loading").hide();

                if (data == null || data.noData == true) {
                    $("#revision-bar").hide();
                    $("#revision-bar-error").show();
                } else {
                    $("#revision-bar").show();
                    $("#revision-bar-error").hide();

                    $("#revision-bar").length && $.plot($("#revision-bar"),
                        [{
                            label: "Revision Time Spent Per Course",
                            data: data.barData,
                            bars: {
                                show: true,
                                fill: true,
                                lineWidth: 1,
                                barWidth: 0.75,
                                order: 1,
                                align: 'center',
                                fillColor: { colors: [{ opacity: 0.5 }, { opacity: 0.9 }] }
                            },
                            color: "#e40424"
                        }],
                        $.extend({}, defaultGraphOptions, {
                            xaxis: {
                                ticks: data.ticks
                            },
                            yaxis: {
                                min: 0, minTickSize: 1
                            }
                        })
                    );
                }
            };

            function updateScoreGraph(data) {
                $("#score-bar-loading").hide();

                if (data == null || data.noData == true) {
                    $("#score-bar").hide();
                    $("#score-bar-error").show();
                } else {
                    $("#score-bar").show();
                    $("#score-bar-error").hide();

                    $("#score-bar").length && $.plot($("#score-bar"),
                        [{
                            label: "User Average Score Per Course",
                            data: data.barData,
                            bars: {
                                show: true,
                                fill: true,
                                lineWidth: 1,
                                barWidth: 0.75,
                                order: 1,
                                align: 'center',
                                fillColor: { colors: [{ opacity: 0.5 }, { opacity: 0.9 }] }
                            },
                            color: "#e40424"
                        }],
                        $.extend({}, defaultGraphOptions, {
                            xaxis: {
                                ticks: data.ticks
                            },
                            yaxis: {
                                min: 0, max: 100, tickSize: 10
                            }
                        })
                    );
                }
            };
        });
    </script>*@
