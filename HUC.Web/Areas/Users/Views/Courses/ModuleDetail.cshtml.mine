@using HUC.Web.App.Resources
@using HUC.Web.App.Users.Courses
@using HUC.Web.App.Resources.Chapters.Contents
@using HUC.Web.App.Resources.Questions.Answers
@using HUC.Web.Models
@model HUC.Web.App.Resources.ResourceModel
@{
    ViewBag.PageData = new PageDataModel
    {
        Title = "Module - " + Model.Sort + " " + Model.Name,
        ContentTitle = "",
        ActivePage = "courses",
        Breadcrumb = new List<BreadcrumbItem>
{
            new BreadcrumbItem("Courses", Url.Action("Index")),
            new BreadcrumbItem(Model.Name)
        }
    };
    List<TestQuestionAnswerModelForJson> answerList = new List<TestQuestionAnswerModelForJson>();
    int nextModuleId = Model.NextResource == null ? 0 : Model.NextResource.ID;
}
<link href="~/_Content/css/accordion.css" rel="stylesheet" />
<link href="~/_Content/css/interview.css" rel="stylesheet" />
<link href="~/_Content/css/flip.css" rel="stylesheet" />
<link href="~/_Content/css/radio.css" rel="stylesheet" />
<link href="~/_Content/css/slider.css" rel="stylesheet" />
<link href="~/_Content/css/player.css" rel="stylesheet" />
<link href="~/_Content/css/truefalse.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>
<script src="~/_Content/Scale/js/popper.min.js"></script>
<script src="~/_Content/Scale/js/bootstrap.min.js"></script>
<script src="~/_Content/js/accordion.js"></script>
<script src="~/_Content/js/interview.js"></script>
<script src="~/_Content/js/flip.js"></script>
<script src="~/_Content/js/radio.js"></script>
<script src="~/_Content/js/slider.js"></script>
<script src="~/_Content/js/truefalse.js"></script>
<style>
    .full-page {
        background-image: url(../../../../_Content/images/extraLarge.png) !important;
        background-repeat: no-repeat;
    }

    .bg-white {
        background-color: transparent !important;
    }

        .bg-white a, .bg-white .logout-btn:hover, .bg-white a:hover {
            color: #000 !important;
        }

    .panel-default {
        margin-top: 520px;
    }

    .align-top-content {
        top: 400px;
        z-index: 1;
    }

    .module-tile {
        border-color: #eaeef1;
        -webkit-box-shadow: 0px 2px 5px 0px rgba(0,0,0,0.5);
        -moz-box-shadow: 0px 2px 5px 0px rgba(0,0,0,0.5);
        box-shadow: 0px 1px 2px 0px rgba(0,0,0,0.5);
        border: 0px !important;
        background-color: #fff;
    }

    .module-tile-first {
        height: 175px;
    }

    .module-tile-second {
        height: 60px;
        background-color: #EBECEE;
    }

    .progress-bar {
        background-color: #000;
    }

    .module-time {
        font-weight: 600;
        position: absolute;
        bottom: 5px;
    }

    .module-assessed-by {
        position: absolute;
        bottom: 25px;
    }

    .disabled-link {
        cursor: no-drop;
    }

    .icon-cross-circle {
        color: red;
    }
    .ev-dragAndDrop-component .ev-drop-zone:nth-child(even) {
        margin-left: unset;
    }
</style>
<input type="hidden" id="hdnModuleId" value="@Model.ID" />
<input type="hidden" id="hdnNextModuleId" value="@nextModuleId" />
<input type="hidden" id="hdnCourseId" value="@Model.Course.ID" />
<div class="desktop-ver">
    <div class="row">
        <div class="col-md-12 align-top-content">
            <a class="btn btn-success pull-right" href="/Users/Dashboard">
                Back to Dashboard<i style="margin-left: 10px;" class="fa fa-arrow-right"></i>
            </a>
        </div>
    </div>
</div>

<div class="mobile-ver middle-btn">
    <div class="row" style="margin-bottom: 10px;">
        <div class="col-md-12">
            <a class="btn btn-success pull-right" href="/Users/Dashboard">
                Back to Dashboard<i style="margin-left: 10px;" class="fa fa-arrow-right"></i>
            </a>
        </div>
    </div>
</div>
<div class="course-overview">
    <div class="col-md-12 main-panel no-padding">
        <div class="panel panel-default" style="box-shadow: 0px 1px 2px 0px rgba(0,0,0,0.5);">
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-12">
                        <h4 style="font-size:25px;font-weight:600">Module @Model.Sort - @Model.Name.</h4>
                        @if (!String.IsNullOrWhiteSpace(Model.TestIntroCopy))
                        {
                            <p style="font-size:15px;"><b>Module Content:</b> @Model.TestIntroCopy</p>
                        }
                        <p style="font-size:15px;"><b>Expected time to completion:</b> 5-10 Mins</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row" style="margin-right: 0px; margin-left: 0;margin-bottom:15px;">
            <div class="col-md-12 module-tile">
                @foreach (var item in Model.Chapters.OrderBy(x => x.Sort))
                {
                    <h4 style="font-size:25px;font-weight:600">Module @Model.Sort.ToString().@item.Sort @item.Name</h4>
                    foreach (var content in item.Contents.OrderBy(x => x.Sort))
                    {
                        switch (content.ContentType)
                        {
                            case ContentType.Text:
                                <p>
                                    @Html.Raw(content.Value)
                                </p>
                                break;

                            case ContentType.Audio:
                                <audio src="/_Media/Uploads/@content.Value" preload="auto"></audio>
                                break;
                            case ContentType.PDF:
                                <iframe src="/_Media/Uploads/@content.Value" style="width:100%; height:500px;" frameborder="0"></iframe>
                                break;
                            case ContentType.VideoYoutube:
                                <iframe width="560" height="315" src="//www.youtube.com/embed/@content.Value?controls=2&modestbranding=1&rel=0" frameborder="0" allowfullscreen></iframe>
                                break;
                            case ContentType.VideoVimeo:
                                <iframe src="//player.vimeo.com/video/@content.Value?badge=0&byline=0&title=0" width="560" height="315" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
                                break;
                            case ContentType.VideoWistia:
                                <iframe src="//fast.wistia.net/embed/iframe/@content.Value" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width="640" height="360"></iframe>
                                break;
                            case ContentType.Accordion:
                                <div class="accordion-module" id="module-@content.ID"></div>
                                <script>
                                        var jasonObj = {
                                            divId: "module-@content.ID",
                                            get accordion() {
                                                return @Html.Raw(content.Value);
                                            },
                                        };
                                        var accordion = new Accordion(jasonObj);
                                        accordion.initialize();
                                </script>
                                break;
                            case ContentType.Flip:
                                <div class="flip-module" id="module-@content.ID"></div>
                                <script>
                                        var flipJson = @Html.Raw(content.Value);
                                        for (var i = 0; i < flipJson.length; i++) {
                                            flipJson[i].imagePath = flipJson[i].imagePath.replace("~/", "../../../");
                                        }
                                        var jasonObj = {
                                            divId: "module-@content.ID",
                                            flip: flipJson,
                                        };
                                        var flip = new Flip(jasonObj);
                                        flip.initialize();
                                </script>
                                break;
                            case ContentType.Interview:
                                <div class="interview-module" id="module-@content.ID"></div>
                                <script>
                                        var jasonObj = {
                                            divId: "module-@content.ID",
                                            name: "@ViewBag.FullName",
                                            role: "Software Engineer",
                                            place: "@ViewBag.CompanyName",
                                            dialogs:@Html.Raw(content.Value),
                                        };
                                        var interview = new Interview(jasonObj);
                                        interview.initialize();
                                </script>
                                break;
                        }
                    }
                }
            </div>
        </div>
        <div class="row" style="margin-right: 0px; margin-left: 0;margin-bottom:15px;">
            <div class="col-md-12 module-tile">
                @foreach (var question in Model.Questions.OrderBy(x => x.Sort))
                {
                    answerList = new List<TestQuestionAnswerModelForJson>();
                    @*<h4 style="font-size:25px;font-weight:600">Part @question.Sort @question.Question</h4>
            <p>@question.Question</p>*@
                    if (question.QuestionType == 1 || question.QuestionType == null)
                    {
                        var formId = "submitAnswer" + question.ID;
                        using (Html.BeginForm(null, null, FormMethod.Post, new { @id = formId }))
                        {
                            <p>
                                <label class="hidden">Flag Question For Later? @Html.CheckBox("flagged")</label>
                            </p>
                            <div class="radio-module" id="module-@question.ID"></div>
                            <input type="hidden" name="course" id="hdnCourseId-@question.ID" value="@question.Resource.Course.ID" />
                            <input type="hidden" name="question" id="hdnQuestionId-@question.ID" value="0" />
                            <input type="hidden" name="answer" id="hdnAnswerId-@question.ID" value="0" />

                            foreach (var curAnswer in question.Answers)
                            {
                                answerList.Add(new TestQuestionAnswerModelForJson
                                {
                                    answerid = curAnswer.ID.ToString(),
                                    option = curAnswer.Answer,
                                    type = curAnswer.IsCorrect == true ? "true" : "false",
                                    selected = curAnswer.ID == question.AnswerId.FirstOrDefault() ? "true" : "false"
                                });
                            }
                            <script>
                                            // Radio
                                            var answers = JSON.parse('@Html.Raw(Json.Encode(answerList))');
                                            var jasonObj = {
                                                divId: "module-@question.ID",
                                                title: "Part 1: Multiple Choice",
                                                question:"@question.Question",
                                                statement: "Select the answer you assess is correct.",
                                                attempts: @question.Attempts,
                                                get multi() {
                                                    return @Html.Raw(Json.Encode(answerList))
                                                },
                                            };
                                            var radio = new Radio(jasonObj);
                                            radio.initialize();
                            </script>
                        }
                    }
                    else if (question.QuestionType == 2)
                    {
                        var formId = "submitAnswer" + question.ID;
                        using (Html.BeginForm(null, null, FormMethod.Post, new { @id = formId }))
                        {
                            <p>
                                <label class="hidden">Flag Question For Later? @Html.CheckBox("flagged")</label>
                            </p>
                            <div class="radio-module" id="module-@question.ID"></div>
                            <input type="hidden" name="course" id="hdnCourseId-@question.ID" value="@question.Resource.Course.ID" />
                            <input type="hidden" name="question" id="hdnQuestionId-@question.ID" value="0" />
                            <input type="hidden" name="answer" id="hdnAnswerId-@question.ID" value="0" />
                            foreach (var curAnswer in question.Answers)
                            {
                                answerList.Add(new TestQuestionAnswerModelForJson
                                {
                                    answerid = curAnswer.ID.ToString(),
                                    option = curAnswer.Answer,
                                    type = curAnswer.IsCorrect == true ? "true" : "false",
                                    selected = question.AnswerId == null ? "false" : curAnswer.ID == question.AnswerId.FirstOrDefault() ? "true" : "false"
                                });
                            }
                            <script>
                                            // Radio
                                            var answers = JSON.parse('@Html.Raw(Json.Encode(answerList))');
                                            var jasonObj = {
                                                divId: "module-@question.ID",
                                                title: "Part 1: Multiple Choice",
                                                question:"@question.Question",
                                                statement: "Select the answer you assess is correct.",
                                                attempts: @question.Attempts,
                                                get multi() {
                                                    return @Html.Raw(Json.Encode(answerList))
                                                },
                                            };
                                            var radio = new Radio(jasonObj);
                                            radio.initialize();
                            </script>
                        }
                    }
                    else if (question.QuestionType == 3)
                    {
                        var formId = "submitAnswer" + question.ID;
                        using (Html.BeginForm(null, null, FormMethod.Post, new { @id = formId }))
                        {
                            <p>
                                <label>Flag Question For Later? @Html.CheckBox("flagged")</label>
                            </p>
                            <div class="radio-module" id="module-@question.ID"></div>
                            <input type="hidden" name="course" id="hdnCourseId-@question.ID" value="@question.Resource.Course.ID" />
                            <input type="hidden" name="question" id="hdnQuestionId-@question.ID" value="0" />
                            <input type="hidden" name="answer" id="hdnAnswerId-@question.ID" value="0" />
                            foreach (var curAnswer in question.Answers)
                            {
                                answerList.Add(new TestQuestionAnswerModelForJson
                                {
                                    answerid = curAnswer.ID.ToString(),
                                    option = curAnswer.Answer,
                                    type = curAnswer.IsCorrect == true ? "true" : "false",

                                });
                            }
                            <script>
                                            // Slider
                                            var answers = JSON.parse('@Html.Raw(Json.Encode(answerList))');
                                            var jasonObj = {
                                                divId: "module-@question.ID",
                                                title: "Part 1: Slider",
                                                subHeading: "Move the slider position between 1 - " + answers.length + " and then press submit.&nbsp;",
                                                max: answers.length,
                                                selected: @question.AnswerOrder == 0? 0 : @question.AnswerOrder,
                                                selectedAnswer: @question.AnswerOrder,
                                                attempts:  @question.Attempts,
                                                question:"@question.Question",
                                                get multi() {
                                                    return @Html.Raw(Json.Encode(answerList))
                                                },
                                            };
                                            var slider = new Slider(jasonObj);
                                            slider.initialize();

                            </script>
                        }
                    }
                    else if (question.QuestionType == 4)
                    {
                        <p>
                            <label>Flag Question For Later? @Html.CheckBox("flagged")</label>
                        </p>
                        <div class="truefalse-module" id="module-@question.ID"></div>
                        <input type="hidden" name="course" id="hdnCourseId-@question.ID" value="@question.Resource.Course.ID" />
                        <input type="hidden" name="question" id="hdnQuestionId-@question.ID" value="@question.ID" />
                        <input type="hidden" name="answer" id="hdnAnswerId-@question.ID" value="0" />
                        foreach (var curAnswer in question.Answers)
                        {
                            answerList.Add(new TestQuestionAnswerModelForJson
                            {
                                answerid = curAnswer.ID.ToString(),
                                option = curAnswer.Answer,
                                type = curAnswer.IsCorrect == true ? "true" : "false",
                                selected = question.AnswerId == null ? "" :
                                question.AnswerId.Where(x => question.AnswerId.Contains(curAnswer.ID)).Count() > 0 ? "true" : "false",

                            });
                        }
                        <script>
                                            // True False
                                            var answers = JSON.parse('@Html.Raw(Json.Encode(answerList))');
                                            var jasonObj = {
                                                divId: "module-@question.ID",
                                                title: "Part 1: True or False",
                                                statement:
                                                    "Read the three statements below. Decide whether they are true or false and then drag them onto corresponding answer.",
                                                attempts: @question.Attempts,
                                                question:  @Html.Raw(Json.Encode(answerList)),
                                            };
                                            var trueFalse = new TrueFalse(jasonObj);
                                            trueFalse.initialize();
                        </script>
                    }
                    else if (question.QuestionType == 5)
                    {
                        <p>
                            <label>Flag Question For Later? @Html.CheckBox("flagged")</label>
                        </p>
                        <div class="truefalse-module" id="module-3"></div>
                        <input type="hidden" name="course" id="hdnCourseId-@question.ID" value="@question.Resource.Course.ID" />
                        <input type="hidden" name="question" id="hdnQuestionId-@question.ID" value="@question.ID" />
                        <input type="hidden" name="answer" id="hdnAnswerId-@question.ID" value="0" />
                        foreach (var curAnswer in question.Answers)
                        {
                            answerList.Add(new TestQuestionAnswerModelForJson
                            {
                                answerid = curAnswer.ID.ToString(),
                                option = curAnswer.Answer,
                                type = curAnswer.IsCorrect == true ? "true" : "false",
                                selected = question.AnswerId == null ? "" :
                                question.AnswerId.Where(x => question.AnswerId.Contains(curAnswer.ID)).Count() > 0 ? "true" : "false",

                            });
                        }
            <script>
                                            // True False
                                            @*var answers = JSON.parse('@Html.Raw(Json.Encode(answerList))');
                                            var jasonObj = {
                                                divId: "module-@question.ID",
                                                title: "Part 1: True or False",
                                                statement:
                                                    "Read the three statements below. Decide whether they are true or false and then drag them onto corresponding answer.",
                                                attempts: @question.Attempts,
                                                question:  @Html.Raw(Json.Encode(answerList)),
                                            };
                                            var trueFalse2 = new TrueFalse2(jasonObj);
                                           trueFalse.initialize();*@

                            $(document).ready(function () {
                                // Here you create Jason Object and initialize Interview instance
                                const jasonObj = {
                                    divId: "module-3",
                                    title: "Part 3: Choose the right answer",
                                    statement:
                                        "The answer here corresponds to one of the statements below. Associate the answer with the right question by dragging and dropping",
                                    attempts: @question.Attempts,
                                    answer: [
                                        {
                                            title: @Html.Raw(Json.Encode(question.Question)),
                                            type: "true",
                                        }
                                    ],
                                    question: @Html.Raw(Json.Encode(answerList)),

                                };

                                const trueFalse2 = new TrueFalse2(jasonObj);


                                trueFalse2.initialize();

                            });


            </script>
                    }
                    else if (question.QuestionType == 6)
                    {
                    int i = 1;
                        <p>
                            <label>Flag Question For Later? @Html.CheckBox("flagged")</label>
                        </p>
                        <div class="truefalse-module" id="module-2"></div>
                        <input type="hidden" name="course" id="hdnCourseId-@question.ID" value="@question.Resource.Course.ID" />
                        <input type="hidden" name="question" id="hdnQuestionId-@question.ID" value="@question.ID" />
                        <input type="hidden" name="answer" id="hdnAnswerId-@question.ID" value="0" />
                    foreach (var curAnswer in question.Answers)
                    {
                        answerList.Add(new TestQuestionAnswerModelForJson
                        {
                            answerid = curAnswer.ID.ToString(),
                            option = "<strong>True or False ? &nbsp;</strong>" + curAnswer.Answer + "&nbsp;</span> <label for='cars'> </label><select name='cars' class='ev-input-text' style='color:black;' id='inid" + i.ToString() + "'><option value=''>Select</option><option value='true'>True</option>  <option value='false'>False</option></select>",
                            type = curAnswer.IsCorrect == true ? "true" : "false",
                            selected = question.AnswerId == null ? "" :
                            question.AnswerId.Where(x => question.AnswerId.Contains(curAnswer.ID)).Count() > 0 ? "true" : "",

                        });
                        i++;
                    }
            <script>
                                            // True False
                                            @*var answers = JSON.parse('@Html.Raw(Json.Encode(answerList))');
                                            var jasonObj = {
                                                divId: "module-2",
                                                title: "Part 1: True or False",
                                                statement:
                                                    "Read the three statements below. Decide whether they are true or false and then drag them onto corresponding answer.",
                                                attempts: @question.Attempts,
                                                question:  @Html.Raw(Json.Encode(answerList)),
                                            };
                                            var trueFalse = new TrueFalse(jasonObj);
                            trueFalse.initialize();*@
                            $(document).ready(function () {
                                // Here you create Jason Object and initialize Interview instance
                                const jasonObj = {
                                    divId: "module-2",
                                    title: "Part 2: True or False",
                                    statement:
                                        "Select True Or False into the Dropdown after the question.",
                                    attempts: @question.Attempts,
                                    question: @Html.Raw(Json.Encode(answerList)),

                                };

                                const trueFalse1 = new TrueFalse1(jasonObj);


                                trueFalse1.initialize();

                            });
            </script>
                    }
                }
            </div>
        </div>
        <div class="row" style="margin-left:0px;margin-right:0px;">
            <div class="col-md-12 module-tile" style="padding: 20px 15px 20px 15px; font-size: 15px;">
                <div class="row">

                    @if (Model.PrevResource != null)
                    {
                        <div class="col-md-1">
                            <a href="/Users/Courses/ModuleDetail/@Model.PrevResource.ID"><i class="fa fa-arrow-left"></i></a>
                        </div>
                        <div class="col-md-4 text-center">
                            <a href="/Users/Courses/ModuleDetail/@Model.PrevResource.ID">@Model.PrevResource.Name</a>
                        </div>
                    }

                    @if (Model.Sort == 1)
                    {
                        <div class="col-md-1">
                            <a href="/Users/Courses/AboutCourse/@Model.Course.ID"><i class="fa fa-arrow-left"></i></a>
                        </div>
                        <div class="col-md-4 text-center">
                            <a href="/Users/Courses/AboutCourse/@Model.Course.ID">About this course</a>
                        </div>
                    }
                    <div class="col-md-2 text-center">
                        <div style="width: 50%; margin: auto; background-color: #EBECEE; border-radius: 5px;">
                            <span>@(Model.Sort + 1)</span> of <span>@Model.TotalResource</span>
                        </div>
                    </div>

                    @if (Model.NextResource != null)
                    {
                        if (Model.ModuleCompleted)
                        {
                            <div class="col-md-4 text-center">
                                <a href="/Users/Courses/ModuleDetail/@Model.NextResource.ID">@Model.NextResource.Name</a>
                            </div>
                            <div class="col-md-1">
                                <a href="/Users/Courses/ModuleDetail/@Model.NextResource.ID"><i class="fa fa-arrow-right pull-right"></i></a>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-4 text-center disabled-link">
                                <a>@Model.NextResource.Name</a>
                            </div>
                            <div class="col-md-1 disabled-link">
                                <a><i class="fa fa-arrow-right pull-right"></i></a>
                            </div>
                        }
                    }
                    else
                    {
                        if (Model.ModuleCompleted)
                        {
                            <div class="col-md-4 text-center">
                                <a href="/Users/Courses/Assessment/@Model.Course.ID">Assessment</a>
                            </div>
                            <div class="col-md-1">
                                <a href="/Users/Courses/Assessment/@Model.Course.ID"><i class="fa fa-arrow-right pull-right"></i></a>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-4 text-center disabled-link">
                                <a>Assessment</a>
                            </div>
                            <div class="col-md-1 disabled-link">
                                <a><i class="fa fa-arrow-right pull-right"></i></a>
                            </div>
                        }
                    }

                </div>
            </div>
        </div>
    </div>
</div>
